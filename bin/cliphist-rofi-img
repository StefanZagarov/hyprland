#!/usr/bin/env bash

tmp_dir="/tmp/cliphist"

# Comprehensive image extension pattern (case-insensitive)
readonly IMG_PATTERN='\.(jpg|JPG|jpeg|JPEG|png|PNG|bmp|BMP|gif|GIF|webp|WEBP|tiff|TIFF|tif|TIF|svg|SVG|ico|ICO|avif|AVIF|heic|HEIC|heif|HEIF|jfif|JFIF|psd|PSD|raw|RAW|cr2|CR2|nef|NEF|dng|DNG)$'

# Check if content is an image
is_image() {
    local content="$1"
    
    # Binary images
    [[ "$content" =~ \[\[.*binary.*data.*(image|jpg|jpeg|png|bmp|gif|webp|tiff|svg|ico|avif|heic) ]] && return 0
    
    # Data URLs
    [[ "$content" =~ ^data:image/ ]] && return 0
    
    # Network URLs with image extensions
    [[ "$content" =~ ^(https?|ftp):// ]] && [[ "$content" =~ $IMG_PATTERN ]] && return 0
    
    # File URLs with image extensions
    [[ "$content" =~ ^file://.* ]] && [[ "$content" =~ $IMG_PATTERN ]] && return 0
    
    # Local file paths with image extensions
    [[ "$content" =~ $IMG_PATTERN ]] && return 0
    
    return 1
}

# Image copy function
copy_image() {
    local id="$1"
    local content="$2"
    
    # Handle browser binary images (comprehensive pattern)
    if [[ "$content" =~ \[\[.*binary.*data.*(image|jpg|jpeg|png|bmp|gif|webp|tiff|svg|ico|avif|heic) ]]; then
        local temp_file="$tmp_dir/${id}.png"
        mkdir -p "$tmp_dir"
        # Use existing preview file if it exists, otherwise create it
        if [[ ! -f "$temp_file" ]]; then
            echo -n "$id" | cliphist decode > "$temp_file"
        fi
        if [[ -f "$temp_file" ]]; then
            echo -n "file://$temp_file" | wl-copy --type "text/uri-list"
        else
            echo -n "$id" | cliphist decode | wl-copy
        fi
        echo "$id" | cliphist delete
        return
    fi
    
    # Handle data URLs (data:image/png;base64,...)
    if [[ "$content" =~ ^data:image/ ]]; then
        echo -n "$content" | wl-copy
        echo "$id" | cliphist delete
        return
    fi
    
    # Handle network URLs (https, http, ftp) with image extensions
    if [[ "$content" =~ ^(https?|ftp):// ]] && [[ "$content" =~ $IMG_PATTERN ]]; then
        echo -n "$content" | wl-copy
        echo "$id" | cliphist delete
        return
    fi
    
    # Handle file URLs (case-insensitive)
    if [[ "$content" =~ ^file://.* ]] && [[ "$content" =~ $IMG_PATTERN ]]; then
        echo -n "$content" | wl-copy --type "text/uri-list"
        echo "$id" | cliphist delete
        return
    fi
    
    # Handle local file paths (relative or absolute, case-insensitive)
    if [[ "$content" =~ $IMG_PATTERN ]]; then
        # Check if it's a valid file path
        local filepath="$content"
        [[ ! "$filepath" =~ ^/ ]] && filepath="$HOME/$content"  # Make relative paths absolute
        
        if [[ -f "$filepath" ]]; then
            echo -n "file://$filepath" | wl-copy --type "text/uri-list"
            echo "$id" | cliphist delete
        else
            echo -n "$content" | wl-copy
        fi
        return
    fi
}

# If argument provided, copy it (only if it's an image)
if [[ -n "$1" ]]; then
    id="${1%% *}"
    content=$(cliphist list | grep "^$id" | cut -f2-)
    
    # Only process if it's an image
    if is_image "$content"; then
        copy_image "$id" "$content"
    fi
    exit
fi

# Generate list with only image entries
mkdir -p "$tmp_dir"

# Enhanced cleanup logic to prevent tmp_dir from filling up
# Clean up old preview files (numbered files like 453.png) - these can be regenerated
find "$tmp_dir" -name "[0-9]*.png" -type f -delete 2>/dev/null

# Clean up old rofi temporary files (from clipboard-rofi script)
find "$tmp_dir" -name "rofi_*" -type f -mtime +0 -delete 2>/dev/null

# Get clipboard list once for efficient cleanup and processing
clipboard_list=$(cliphist list)

# Clean up old preview files that are no longer referenced in clipboard history
find "$tmp_dir" -name "[0-9]*.png" -type f | while read -r preview_file; do
    file_id=$(basename "$preview_file" .png)
    if ! echo "$clipboard_list" | grep -q "^$file_id[[:space:]]"; then
        rm -f "$preview_file"
    fi
done

echo "$clipboard_list" | while IFS=$'\t' read -r id content; do
    # Skip HTML meta tags
    [[ "$content" =~ ^'<meta http-equiv=' ]] && continue
    
    # Only process if it's an image
    if ! is_image "$content"; then
        continue
    fi
    
    # Binary images: create temp preview (comprehensive pattern)
    if [[ "$content" =~ \[\[.*binary.*data.*(image|jpg|jpeg|png|bmp|gif|webp|tiff|svg|ico|avif|heic) ]]; then
        preview="$tmp_dir/${id}.png"
        [[ ! -f "$preview" ]] && echo -n "$id" | cliphist decode > "$preview"
        printf '%s\t%s\000icon\037%s\n' "$id" "$content" "$preview"
        
    # Data URLs: show with generic image icon
    elif [[ "$content" =~ ^data:image/ ]]; then
        printf '%s\t%s\000icon\037image-x-generic\n' "$id" "$content"
        
    # Network URLs: show with generic image icon (case-insensitive)
    elif [[ "$content" =~ ^(https?|ftp):// ]] && [[ "$content" =~ $IMG_PATTERN ]]; then
        printf '%s\t%s\000icon\037image-x-generic\n' "$id" "$content"
        
    # File URLs: use actual file as icon (case-insensitive)
    elif [[ "$content" =~ ^file://.* ]] && [[ "$content" =~ $IMG_PATTERN ]]; then
        filepath="${content#file://}"
        if [[ -f "$filepath" ]]; then
            printf '%s\t%s\000icon\037%s\n' "$id" "$content" "$filepath"
        else
            printf '%s\t%s\000icon\037image-x-generic\n' "$id" "$content"
        fi
        
    # Local file paths: check if valid image file (case-insensitive)
    elif [[ "$content" =~ $IMG_PATTERN ]]; then
        filepath="$content"
        [[ ! "$filepath" =~ ^/ ]] && filepath="$HOME/$content"  # Make relative paths absolute
        
        if [[ -f "$filepath" ]]; then
            printf '%s\t%s\000icon\037%s\n' "$id" "$content" "$filepath"
        else
            printf '%s\t%s\000icon\037image-x-generic\n' "$id" "$content"
        fi
    fi
done 