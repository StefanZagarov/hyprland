#!/usr/bin/env bash

# Check if content is an image (same logic as cliphist-rofi-img)
is_image() {
    local content="$1"
    [[ "$content" =~ \[\[.*binary.*data.*(image|jpg|jpeg|png|bmp|gif|webp|tiff|svg|ico|avif|heic) ]] && return 0
    [[ "$content" =~ ^data:image/ ]] && return 0
    [[ "$content" =~ ^(https?|ftp):// ]] && [[ "$content" =~ \.(jpg|JPG|jpeg|JPEG|png|PNG|bmp|BMP|gif|GIF|webp|WEBP|tiff|TIFF|tif|TIF|svg|SVG|ico|ICO|avif|AVIF|heic|HEIC|heif|HEIF|jfif|JFIF|psd|PSD|raw|RAW|cr2|CR2|nef|NEF|dng|DNG)$ ]] && return 0
    [[ "$content" =~ ^file://.* ]] && [[ "$content" =~ \.(jpg|JPG|jpeg|JPEG|png|PNG|bmp|BMP|gif|GIF|webp|WEBP|tiff|TIFF|tif|TIF|svg|SVG|ico|ICO|avif|AVIF|heic|HEIC|heif|HEIF|jfif|JFIF|psd|PSD|raw|RAW|cr2|CR2|nef|NEF|dng|DNG)$ ]] && return 0
    [[ "$content" =~ \.(jpg|JPG|jpeg|JPEG|png|PNG|bmp|BMP|gif|GIF|webp|WEBP|tiff|TIFF|tif|TIF|svg|SVG|ico|ICO|avif|AVIF|heic|HEIC|heif|HEIF|jfif|JFIF|psd|PSD|raw|RAW|cr2|CR2|nef|NEF|dng|DNG)$ ]] && return 0
    return 1
}

# Use same directory as cliphist-rofi-img for organization
tmp_dir="/tmp/cliphist"
mkdir -p "$tmp_dir"

# Get clipboard list
clipboard_list=$(cliphist list)

# Delete any HTML meta tag entries to prevent bloat
echo "$clipboard_list" | while IFS=$'\t' read -r id content; do
    if [[ "$content" =~ ^'<meta http-equiv=' ]]; then
        echo "$id" | cliphist delete
    fi
done

# Update clipboard list after meta tag cleanup
clipboard_list=$(cliphist list)

# Limit clipboard to 200 items - delete oldest entries if over limit
item_count=$(echo "$clipboard_list" | wc -l)
if [[ "$item_count" -gt 200 ]]; then
    echo "Clipboard has $item_count items, trimming to 200..."
    # Get the oldest items (beyond the first 200) and delete them
    echo "$clipboard_list" | tail -n +201 | while IFS=$'\t' read -r id content; do
        echo "$id" | cliphist delete
        # Also delete associated preview files from tmp/cliphist if they exist
        preview_file="$tmp_dir/${id}.png"
        [[ -f "$preview_file" ]] && rm -f "$preview_file"
    done
    # Update clipboard list after trimming
    clipboard_list=$(cliphist list)
fi

# Check if tmp/cliphist image files exist in clipboard list, delete if not
for image_file in "$tmp_dir"/*.png; do
    [[ -f "$image_file" ]] || continue
    filename=$(basename "$image_file" .png)
    # Check if ID exists OR if any entry references this file
    if ! echo "$clipboard_list" | grep -q "^$filename[[:space:]]" && \
       ! echo "$clipboard_list" | grep -q "file://$image_file"; then
        rm -f "$image_file"
    fi
done

# Create temporary file in the cliphist directory
tmp_combined="$tmp_dir/rofi_combined_$$"

# Clean up temporary files on exit
trap 'rm -f "$tmp_combined"' EXIT

# Process entries in chronological order (newest first)
echo "$clipboard_list" | while IFS=$'\t' read -r id content; do

    
    if is_image "$content"; then
        # Format image entry (simplified from cliphist-rofi-img logic)
        if [[ "$content" =~ \[\[.*binary.*data.*(image|jpg|jpeg|png|bmp|gif|webp|tiff|svg|ico|avif|heic) ]]; then
            preview="$tmp_dir/${id}.png"
            [[ ! -f "$preview" ]] && echo -n "$id" | cliphist decode > "$preview"
            printf '%s\t%s\000icon\037%s\n' "$id" "$content" "$preview"
        elif [[ "$content" =~ ^data:image/ ]]; then
            printf '%s\t%s\000icon\037image-x-generic\n' "$id" "$content"
        elif [[ "$content" =~ ^(https?|ftp):// ]] && [[ "$content" =~ \.(jpg|JPG|jpeg|JPEG|png|PNG|bmp|BMP|gif|GIF|webp|WEBP|tiff|TIFF|tif|TIF|svg|SVG|ico|ICO|avif|AVIF|heic|HEIC|heif|HEIF|jfif|JFIF|psd|PSD|raw|RAW|cr2|CR2|nef|NEF|dng|DNG)$ ]]; then
            printf '%s\t%s\000icon\037image-x-generic\n' "$id" "$content"
        elif [[ "$content" =~ ^file://.* ]] && [[ "$content" =~ \.(jpg|JPG|jpeg|JPEG|png|PNG|bmp|BMP|gif|GIF|webp|WEBP|tiff|TIFF|tif|TIF|svg|SVG|ico|ICO|avif|AVIF|heic|HEIC|heif|HEIF|jfif|JFIF|psd|PSD|raw|RAW|cr2|CR2|nef|NEF|dng|DNG)$ ]]; then
            filepath="${content#file://}"
            if [[ -f "$filepath" ]]; then
                printf '%s\t%s\000icon\037%s\n' "$id" "$content" "$filepath"
            else
                printf '%s\t%s\000icon\037image-x-generic\n' "$id" "$content"
            fi
        elif [[ "$content" =~ \.(jpg|JPG|jpeg|JPEG|png|PNG|bmp|BMP|gif|GIF|webp|WEBP|tiff|TIFF|tif|TIF|svg|SVG|ico|ICO|avif|AVIF|heic|HEIC|heif|HEIF|jfif|JFIF|psd|PSD|raw|RAW|cr2|CR2|nef|NEF|dng|DNG)$ ]]; then
            filepath="$content"
            [[ ! "$filepath" =~ ^/ ]] && filepath="$HOME/$content"
            if [[ -f "$filepath" ]]; then
                printf '%s\t%s\000icon\037%s\n' "$id" "$content" "$filepath"
            else
                printf '%s\t%s\000icon\037image-x-generic\n' "$id" "$content"
            fi
        fi
    else
        # Format text entry
        printf '%s\t%s\000icon\037text-x-generic\n' "$id" "$content"
    fi
done > "$tmp_combined"

# Exit if no entries
[[ ! -s "$tmp_combined" ]] && exit 0

# Show in rofi and get index
selected_index=$(cat "$tmp_combined" | rofi -dmenu -show-icons -p "Clipboard" -format "i")

# Process selection
if [[ -n "$selected_index" ]]; then
    selected_line=$(sed -n "$((selected_index + 1))p" "$tmp_combined")
    if [[ "$selected_line" =~ ^([0-9]+) ]]; then
        id="${BASH_REMATCH[1]}"
        content=$(cliphist list | grep "^$id" | cut -f2-)
        
        # Route to appropriate handler based on content type
        if is_image "$content"; then
        ~/.local/bin/cliphist-rofi-img "$id"
        else
            echo -n "$id" | cliphist decode | wl-copy
            echo "$id" | cliphist delete
        fi
    fi
fi