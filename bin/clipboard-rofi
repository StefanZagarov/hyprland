#!/usr/bin/env bash

# Constants
readonly IMG_PATTERN='\.(jpg|JPG|jpeg|JPEG|png|PNG|bmp|BMP|gif|GIF|webp|WEBP|tiff|TIFF|tif|TIF|svg|SVG|ico|ICO|avif|AVIF|heic|HEIC|heif|HEIF|jfif|JFIF|psd|PSD|raw|RAW|cr2|CR2|nef|NEF|dng|DNG)$'
readonly BINARY_IMG_PATTERN='\[\[.*binary.*data.*(image|jpg|jpeg|png|bmp|gif|webp|tiff|svg|ico|avif|heic)'
readonly tmp_dir="/tmp/cliphist"
readonly MAX_ITEMS=100

# Simple image detection
is_image() {
    local content="$1"
    [[ "$content" =~ $BINARY_IMG_PATTERN ]] && return 0
    [[ "$content" =~ ^data:image/ ]] && return 0
    [[ "$content" =~ ^(https?|ftp):// ]] && [[ "$content" =~ $IMG_PATTERN ]] && return 0
    [[ "$content" =~ ^file://.* ]] && [[ "$content" =~ $IMG_PATTERN ]] && return 0
    [[ "$content" =~ $IMG_PATTERN ]] && return 0
    return 1
}

# Get icon path for image content
get_image_icon() {
    local id="$1" content="$2"
    
    # Binary images: create/use preview file
    if [[ "$content" =~ $BINARY_IMG_PATTERN ]]; then
        local preview="$tmp_dir/${id}.png"
        [[ ! -f "$preview" ]] && echo -n "$id" | cliphist decode > "$preview"
        echo "$preview"
        return
    fi
    
    # File URLs and local paths: use actual file if exists
    local filepath="$content"
    [[ "$content" =~ ^file://.* ]] && filepath="${content#file://}"
    [[ ! "$filepath" =~ ^/ ]] && filepath="$HOME/$content"
    
    if [[ -f "$filepath" ]]; then
        echo "$filepath"
    else
        echo "image-x-generic"
    fi
}

mkdir -p "$tmp_dir"

# Get and clean clipboard list once
clipboard_list=$(cliphist list)

# Combined cleanup: meta tags + item limit - track changes to avoid second cliphist call
declare -A deleted_ids

# Delete meta tags - collect IDs first to avoid subshell issues
meta_ids=()
while IFS=$'\t' read -r id content; do
    if [[ "$content" =~ ^'<meta http-equiv=' ]]; then
        meta_ids+=("$id")
    fi
done <<< "$clipboard_list"

# Delete collected meta tag IDs
for id in "${meta_ids[@]}"; do
    echo "$id" | cliphist delete
    deleted_ids["$id"]=1
done

# Get updated clipboard list after metadata deletion
if [[ ${#meta_ids[@]} -gt 0 ]]; then
    clipboard_list=$(cliphist list)
fi

# After metadata deletion, check if items > MAX_ITEMS and delete all exceeding items
current_count=$(echo "$clipboard_list" | wc -l)
if [[ "$current_count" -gt "$MAX_ITEMS" ]]; then
    echo "Clipboard has $current_count items, trimming to $MAX_ITEMS..."
    # Get all items beyond MAX_ITEMS (oldest items) and delete them
    excess_count=$((current_count - MAX_ITEMS))
    excess_ids=()
    while IFS=$'\t' read -r old_id content; do
        excess_ids+=("$old_id")
    done <<< "$(echo "$clipboard_list" | tail -n "$excess_count")"
    
    # Delete collected excess IDs
    for old_id in "${excess_ids[@]}"; do
        echo "Deleting excess item: $old_id"
        echo "$old_id" | cliphist delete
        deleted_ids["$old_id"]=1
        rm -f "$tmp_dir/${old_id}.png"  # Clean preview file
    done
fi

# Get updated clipboard list after cleanup - only if we deleted excess items
if [[ ${#excess_ids[@]} -gt 0 ]]; then
    clipboard_list=$(cliphist list)
fi

# Optimized orphaned file cleanup with hash table - accounts for file URL references
declare -A valid_ids
while IFS=$'\t' read -r id content; do
    # Skip empty IDs to avoid array subscript errors
    [[ -z "$id" ]] && continue
    valid_ids["$id"]=1
    # Also mark files referenced by file:// URLs as valid
    if [[ "$content" =~ ^file://.*/tmp/cliphist/([0-9]+)\.png$ ]]; then
        valid_ids["${BASH_REMATCH[1]}"]=1
    fi
done <<< "$clipboard_list"

# Clean orphaned files with O(1) lookups
for png_file in "$tmp_dir"/*.png; do
    [[ -f "$png_file" ]] || continue
    filename=$(basename "$png_file" .png)
    [[ -z "${valid_ids[$filename]}" ]] && rm -f "$png_file"
done

# Create temporary file
tmp_combined="$tmp_dir/rofi_combined_$$"
trap 'rm -f "$tmp_combined" "$tmp_dir/content_cache_$$"' EXIT

# Process entries efficiently - build safe content cache
content_cache_file="$tmp_dir/content_cache_$$"
> "$content_cache_file"  # Clear cache file

echo "$clipboard_list" | while IFS=$'\t' read -r id content; do
    # Skip empty IDs to avoid array subscript errors
    [[ -z "$id" ]] && continue
    
    # Cache image detection result to avoid redundant calls
    if is_image "$content"; then
        is_img="1"
        icon=$(get_image_icon "$id" "$content")
        printf '%s\t%s\000icon\037%s\n' "$id" "$content" "$icon"
    else
        is_img="0"
        printf '%s\t%s\000icon\037text-x-generic\n' "$id" "$content"
    fi
    
    # Write to cache file safely with image detection result - encode only when writing
    content_b64=$(printf '%s' "$content" | base64 -w 0)
    printf '%s\t%s\t%s\n' "$id" "$content_b64" "$is_img" >> "$content_cache_file"
done > "$tmp_combined"

# Exit if no entries
[[ ! -s "$tmp_combined" ]] && exit 0

# Show in rofi and process selection
selected_index=$(rofi -dmenu -show-icons -p "Clipboard" -format "i" < "$tmp_combined")

if [[ -n "$selected_index" ]]; then
    selected_line=$(sed -n "$((selected_index + 1))p" "$tmp_combined")
    if [[ "$selected_line" =~ ^([0-9]+) ]]; then
        id="${BASH_REMATCH[1]}"
        
        # Load content and image detection result from cache with O(1) lookup
        content_cache_file="$tmp_dir/content_cache_$$"
        if [[ -f "$content_cache_file" ]]; then
            # Safe lookup using grep on cache file + base64 decode
            cache_line=$(grep "^$id"$'\t' "$content_cache_file")
            if [[ -n "$cache_line" ]]; then
                content_b64=$(echo "$cache_line" | cut -f2)
                is_img_cached=$(echo "$cache_line" | cut -f3)
                content=$(printf '%s' "$content_b64" | base64 -d)
            else
                # Fallback to grep if ID not in cache
                content=$(echo "$clipboard_list" | grep "^$id" | cut -f2-)
                is_img_cached=""
            fi
        else
            # Fallback to grep if cache unavailable
            content=$(echo "$clipboard_list" | grep "^$id" | cut -f2-)
            is_img_cached=""
        fi
        
        # Route to appropriate handler using cached result or fallback
        if [[ "$is_img_cached" == "1" ]] || { [[ -z "$is_img_cached" ]] && is_image "$content"; }; then
            ~/.local/bin/cliphist-rofi-img "$id" "$content"
        else
            echo -n "$id" | cliphist decode | wl-copy
            echo "$id" | cliphist delete
        fi
    fi
fi